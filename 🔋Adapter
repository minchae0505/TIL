# Adapter

<aside>
💡

data를 받아서 AdapterView에 출력할 수 있도록 **데이터를 저장 • 가공하며 data item에 접근할 수 있게 해주는 중간 다리**

</aside>

- Adapter는 인터페이스이고, 데이터와 AdapterView를 연결하는 하나의 다리 역할을 하는 객체로 일종의 데이터(Array, List, DB, Provider 등)을 받아 관리하고, AdapterView로 출력할 수 있는 형태로 만들어준다.
    
    →  Adapter는 data를 받아서 AdapterView에 출력할 수 있도록 데이터를 저장 가공하며 data item에 접근할 수 있게 해준다.
    

<aside>
💡

### Adapter가 **알고 있어야 하는 정보**

- 저장, 가공할 **data**를 알고 있어야 한다.(ex. 유저 정보, 신청 정보)
- **어떤 형태**로 item을 **구성할 지에 대한 layout**을 알고 있어야 한다 (RecyclerView에선 LayoutManage가 담당)
- data와 layout을 **mapping**할 수 있어야 한다.
</aside>

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/96c0343c-2cb9-4aeb-9291-0ef4be07e17c/3ba2a75e-0b33-45fc-8db6-8441956fc920/image.png)

- Adapter의 종류: ArrayAdapter(List), CurosrAdapter(DB), SimpleAdapter(다른 것들에 비해 확장성 낮음)
- Adapter의 서브 클래스를 여러 개 제공
- 각 하위 단계의 class들은 상위 단계의 class들을 상속 받는다. 그리고 가장 상위에 인터페이스인 Adapter를 구현

---

# AdapterView

<aside>
💡

**Adapter가 관리하는 데이터를 출력할 수 있게 해주는 View**

- **많은 양의 data를 하나의 View로 보여주기 위해** 만들어진 추상 클래스
- (data set의 형태로 눈에 보이도록)

(ViewGroup을 상속 받음)

</aside>

- 목록, 그리드 및 스피너와 같은 AdapterView는 보기 계층에서 자식 View 를 유지하지 않기 때문에 일반 레이아웃(ex. LinearLayout)과 다르다.
- **AdapterView의 주요 목적**
    
    **화면에 대용량 데이터 세트(여러 항목으로 된 리스트 같은 모습)를 효율적으로 표시**하는 것으로, 현재 화면에 보이는 View만 생성하도록 하여 메모리 사용 및 성능을 최적화 해야 한다.
    

<aside>
💡

### "여러 항목을 보여주기"위해 필요한 구성 요소 3가지

1. 데이터(**Data**)를
2. 가공하여 하나의 요소(**Item**)로 구성하고(**Adapter**)
3. AdapterView에 나열한다
</aside>

- AdapterView의 특징 중 하나는 ScrollView는 모든 내용이 미리 로드 되어 있어야 하지만, **AdapterView는 화면에 보이는 내용만 로딩 할 수 있고, layout을 재사용 할 수 있다.**
- 재사용이란 layout객체를 다른 객체에 저장 시켜둔 뒤 화면에 보여야 할 때 다시 꺼내오는 기법을 으로 Holder를 이용해 구현할 수 있다.
- layout을 재사용 하는 것이 아닌, item view마다 계속 layout을 그린다면 비용이 많이 들기 때문에 AdapterView와 Holder를 이용해 비용을 줄이는 기법을 많이 사용한다.
