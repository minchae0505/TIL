# Activity

- (여태 까지 안드로이드 공부하면서 나에게 가장 큰 충격을 안겨준 것 같은 부분, 난 미리 경고함)
    
    일단 activity가 클래스라는 말에 굉장히 깜짝 놀랐고 충격을 받았음. 아니 난 여태 까지 activity하면 activity_main.xml을 떠올리고는 “activity는 view 전체를 관리하는 화면이야!“ 라고 생각했는데… 한참을 잘못 생각하고 있었넹,, ㅎㅎㅎ….
    
    둘째로 사람들이 생명 주기에 대해 정리를 너무 대충 해 놨다. 다들 서로 서로의 게시물을 그대로 복붙해서 자신이 정리한 것 마냥 게시를 해 놨더라… 덕분에 공식 문서 읽는데 평소보다 오래 걸렸다. 진짜 생명 주기 영어로 설명 해 놓은 거 해석하는데 왜 이렇게 어렵냐.. 다들 제대로 이해하고 싶은 마음이 안 들었나 진짜,,,ㅠㅠㅠㅠ
    

Activity = (특별한 목적을 위한) 활동

<aside>
💡

앱이 실행되면 특정 화면이 실행되며, 그 화면에서 UI가 노출되고, 개발자가 설정한 터치 이벤트나 시각적인 여러 이벤트들이 같이 실행 될 텐 데, 이것을 제어해주는 클래스다. 

</aside>

즉, 앱이 실행될 때 동작하는 여러가지를 제어 (→ 특별한 목적을 위한 활동)를 해주는 것이 클래스임.

대표적으로 MainActivity가 있다.

# 액티비티 (Activity)

- ❌activity는 사용자가 Application과 상호 작용하며 실제로 사용자에게 보이는 화면을 의미(틀린 말)
- 반드시 1개 이상의 activity가 필요하다.(→ Application에 화면이 하나도 없으면, 사용자와 상호작용 할 수 없기 때문)
- 다른 Application의 activity역시 `인텐트(Intent)`를 통해 불러올 수 있다.
- 안드로이드 Application은 반드시 하나 이상의 activity를 포함하고 있으며 activity는 `생명주기(Life Cycle)` 관련 메서드들을 재정의하여 원하는 기능들을 구현할 수 있다.
    - 2개 이상의 activity를 동시에 Display 할 수 없다.
    - 1개 이상의 View 또는 ViewGroup을 포함한다.
    - activity내에 프래그먼트(Fragment)를 추가하여 화면을 분할 시킬 수 있다.

 적합
- Activity가 생성되면 *생성됨* 상태가 된다.

 `onCreate()` 메서드가 실행을 완료하면 활동이 *Started* 상태가 되고 

시스템은 [`onStart()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onStart())를 호출한다.

### onStart()

활동이 started 상태로 전환되면 시스템은 [`onStart()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onStart())를 호출

- Activity가 화면에 표시되기 직전에 호출됨
- 화면에 진입할 때마다 실행되어야 하는 작업을 이곳에 구현함
- 이 호출을 통해 활동이 사용자에게 앱이 활동이 포그라운드에 들어가 상호작용을 할 수 있도록 준비한다. (ex. UI가 초기화된다.)

활동이  started 상태로 전환되면 연결된 모든 수명 주기 인식 구성 요소가 [`ON_START`](https://developer.android.com/reference/androidx/lifecycle/Lifecycle.Event?hl=ko#ON_START) 이벤트를 수신한다.

`onStart()` 메서드가 완료되면  activity가 *재개됨* 상태가 되고 시스템에서 [`onResume()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onResume()) 메서드가 실행된다.

### onResume()

- Activity가 화면에 보여지는 직후에 호출됨(+ Activity가 재개됨 상태라는 것은 화면이 포그라운드, 즉 눈에 보인다는 것 → activity가  [`onResume()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onResume()) 을 호출하기 때문)
- 앱이 사용자와 상호작용을 시작한다.
- 현재 Activity가 사용자에게 포커스인 되어있는 상태
- 사용자가 앱에서 어떤 행동을 하기 전까지 앱은 이 상태로 유지(→ 앱에서 사용자가 전화를 받거나, 다른 앱으로 이동하기, 또는 디바이스 화면이 꺼지는 등 앱에서 포커스가 빼앗기기 전까지 앱은 이 상태를 유지)
- 활동이 재개됨 상태(Resumed state)로 이동하면 activity의 수명 주기에 연결된 모든 수명 주기 인식 구성 요소에 ON_RESUME 이벤트가 표시된다.
- 여기서 수명 주기 구성 요소는 카메라 미리보기(visible)를 시작하는 등 구성 요소가 보이는 동안 전면에서 실행해야 하는 모든 기능을 활성화할 수 있습니다.

중단 이벤트가 발생하면 활동이 일시 중지 상태로 전환되고 시스템이 일시 중지() 콜백을 호출합니다.

활동이 일시 중지 상태에서 재개 상태로 돌아오면 시스템은 다시 한 번 onResume() 메서드를 호출합니다. 따라서 onResume()을 구현하여 일시 중지() 중에 해제하는 구성 요소를 초기화하고 활동이 재개 상태에 진입할 때마다 발생해야 하는 다른 초기화를 수행합니다.

활동이 재개됨 상태로 전환하면 개발자가 [`ON_RESUME`](https://developer.android.com/reference/androidx/lifecycle/Lifecycle.Event?hl=ko#ON_RESUME) 드림 이벤트를 처리합니다. 이 상태에서 수명 주기 구성요소가 포그라운드에서 사용자에게 보이는 동안 실행해야 하는 모든 기능을 활성화할 수 있습니다(예: 카메라 미리보기 시작).

방해되는 이벤트가 발생하면 활동은 *일시중지됨* 시스템은 포드의 상태를 [`onPause()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onPause()) 콜백.

활동이 일시중지됨 상태에서 재개됨 상태인 경우 시스템은 다시 한 번 `onResume()` 메서드를 사용하여 지도 가장자리에 패딩을 추가할 수 있습니다. 이러한 이유로 `onResume()`: 출시 중에 해제하는 구성요소를 초기화합니다. `onPause()` 및 다른 활동이 재개됨 있습니다.

다음은 이 슬라이드에서 볼 수 있듯이, 테스트가 실행될 때 카메라에 액세스하는 수명 주기 인식 구성요소의 구성요소가 `ON_RESUME` 이벤트를 수신합니다.

위의 코드는 [`LifecycleObserver`](https://developer.android.com/reference/androidx/lifecycle/LifecycleObserver?hl=ko) 드림 `ON_RESUME` 이벤트를 수신합니다. 그러나 멀티 윈도우 모드에서는 활동이 일시중지 상태인 경우에도 완전히 표시될 수 있습니다. 예를 들어 앱이 멀티 윈도우 모드에 있고 사용자가 지원되지 않는 창을 탭하는 경우 포함되면 활동이 일시 중지됨 상태로 전환됩니다.

만약 앱이 재개됨 (표시되는 경우)인 경우에만 카메라를 활성화하려는 경우 활성화되고 포그라운드에서 활성화되어 있음)를 완료한 후 카메라를 초기화합니다. 이벤트 `ON_RESUME`개 살펴보겠습니다 활동 중에 카메라를 활성 상태로 유지하고 싶은 경우 일시중지되었지만 표시되는 상태(예: 멀티 윈도우 모드)에서 `ON_START` 이벤트 후에 카메라를 초기화합니다.

하지만 활동이 일시중지 상태일 때 다른 사람이 카메라에 액세스하지 못할 수 있습니다. 앱을 멀티 윈도우 모드에서 재개했습니다. 경우에 따라 활동이 일시중지됨 상태인 동안에도 카메라는 활성 상태로 유지되지만, 실제로 성능의 전반적인 사용자 경험을 개선할 수 있습니다

따라서 광고의 어느 부분에 문제가 있는지 Google Cloud에서 공유 시스템 리소스를 제어하는 것이 멀티 윈도우 모드의 컨텍스트와는 관련이 없습니다. 멀티 윈도우 지원에 관해 자세히 알아보기 [멀티 윈도우 지원](https://developer.android.com/guide/topics/ui/multi-window?hl=ko)을 참고하세요.

어떤 빌드업 이벤트에서 초기화 작업을 실행하든 빌드업 이벤트에 상응하는 수명 주기 이벤트를 사용하여 리소스를 해제하세요. kubectl 명령어 이후에 초기화하면 `ON_START` 이벤트를 종료하거나 `ON_STOP` 이벤트. 만약 `ON_RESUME` 이벤트 후에 초기화되고 `ON_PAUSE` 이벤트.

위의 코드 스니펫은 카메라 초기화 코드를 수명 주기 인식 구성요소를 사용합니다. 대신 이 코드를 활동에 직접 넣을 수 있습니다. 수명 주기 콜백(예: `onStart()`, `onStop()`이지만 권장하지는 않습니다. 이 로직 추가 수명 주기 인식 구성요소를 독립된 구성요소로 추가하면 해당 구성요소를 여러 활동을 실행할 수 있습니다. 수명 주기 인식 구성요소를 만드는 방법은 다음을 참조하세요. [수명 주기 인식 구성요소로 수명 주기 처리](https://developer.android.com/topic/libraries/architecture/lifecycle?hl=ko)

### onPause()

시스템은 사용자가 앱을 종료한다는 첫 번째 신호로 이 메서드를 호출한다. 하지만 항상 활동이 소멸되고 있음을 의미하지는 않는는다. activity가 더 이상 포그라운드에 있지 않음을 나타내지만 사용자가 멀티 윈도우 모드에 있는 경우에도 계속 표시된다. 여러 가지 이유로 활동이 이 상태는

- 다음에 관한 섹션에서 설명한 대로 앱 실행을 방해하는 이벤트 [onResume()](https://developer.android.com/guide/components/activities/activity-lifecycle?hl=ko#onresume) 콜백이 호출되면 현재 활동을 일시중지합니다. 이것이 가장 일반적인 사례입니다.
- 멀티 윈도우 모드에서는 하나의 앱에만 포커스가 있음 언제든지 다른 앱을 일시중지합니다.
- 대화상자와 같은 새로운 반투명 활동이 열리면 다루는 활동을 일시중지합니다. 활동이 부분적으로 보이지만 포커스가 없는 경우 일시중지 상태로 유지됩니다

활동이 일시중지됨 상태로 전환하면 모든 수명 주기 인식 구성요소가 개발자가 [`ON_PAUSE`](https://developer.android.com/reference/androidx/lifecycle/Lifecycle.Event?hl=ko#ON_PAUSE) 이벤트를 수신합니다. 여기에서 수명 주기 구성요소는 구성요소가 포그라운드에 있지 않을 때 실행할 필요가 없는 기능을 모두 정지할 수 있습니다(예: 카메라 미리보기 정지).

[`onPause()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onPause()) 메서드를 사용하여 일시중지하거나 지속할 수 없거나 적당히 지속될 수 있는 운영을 조정하고, `Activity`가 일시중지 상태인 경우 곧 재개될 것으로 예상됩니다.

`onPause()` 메서드를 사용하여 다음 작업을 수행할 수도 있습니다. 시스템 리소스, 센서 (예: GPS)에 대한 핸들 또는 활동이 일시중지되면 배터리 수명에 영향을 미치고 사용자는 있습니다.

그러나 `onResume()`에 관한 섹션에서 언급한 것처럼 활동이 여전히 완전히 보일 수도 있습니다. `onPause()` 대신 `onStop()`를 사용하여 완전히 해제하거나 조정하세요. 멀티 윈도우 모드를 더 잘 지원하기 위한 UI 관련 리소스 및 작업

[`LifecycleObserver`](https://developer.android.com/reference/androidx/lifecycle/LifecycleObserver?hl=ko)의 다음 예 `ON_PAUSE` 이벤트에 대한 반응은 이전 `ON_RESUME` 이벤트 예: 다음 이후에 초기화되는 카메라를 해제합니다. `ON_RESUME` 이벤트가 수신되면 다음과 같이 처리됩니다.

이 예에서는 `LifecycleObserver`에서 `ON_PAUSE` 이벤트를 수신합니다.

`onPause()` 실행이 매우 짧고 저장 작업을 수행하기에 충분한 시간을 제공하지 않을 수도 있습니다. 이 작업 애플리케이션이나 사용자를 저장하는 데 `onPause()`를 사용하지 **마세요**. 네트워크 호출을 하거나 데이터베이스 트랜잭션을 실행할 수 있습니다. 그러한 작업은 완료될 때까지 기다릴 필요가 없습니다.

그 대신 과부하가 걸리는 종료 작업을 [`onStop()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onStop()) 자세한 내용은 작업을 수행하는 동안 수행해야 하는 `onStop()`은 다음 섹션을 참고하세요. 저장에 대한 자세한 내용은 [상태 저장 및 복원](https://developer.android.com/guide/components/activities/activity-lifecycle?hl=ko#saras)에 관한 섹션을 참고하세요.

`onPause()` 메서드의 실행이 완료되더라도 활동이 일시중지됨 상태로 남아 있을 수 있습니다. 오히려 액티비티는 활동이 재개되거나 완전히 가능해질 때까지 이 상태로 유지됩니다. 표시됩니다. 활동이 다시 시작되면 시스템은 다시 한번 `onResume()` 콜백을 호출합니다.

만약 활동이 일시중지됨 상태에서 재개됨 상태로 돌아가더라도 시스템은 메모리에 상주하는 `Activity` 인스턴스, 리콜 시스템이 `onResume()`를 호출할 때 해당 인스턴스의 이름을 지정합니다. 이 시나리오에서는 실행 도중에 생성된 구성 요소를 재개됨 상태로 이어지는 콜백 메서드가 있습니다. 활동이 시스템은 `onStop()`

+

### 4) onPause()

- Activity가 화면에 보여지지 않은 직후에 호출됨
- 현재 Activity가 사용자에게 포커스아웃 되어있는 상태
- 다른 Activity가 호출되기 전에 실행되기 때문에 무거운 작업을 수행하지 않도록 주의해야함
- 영구적인 Data는 이곳에 저장

### onStop()

활동이 사용자에게 더 이상 표시되지 않으면 *중단됨* 상태가 되면 시스템에서 [`onStop()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onStop()) 콜백. 이 문제는 새로 시작된 활동이 전체 화면을 차지할 때 발생할 수 있습니다. 이 시스템은 `onStop()`도 호출합니다. 활동 실행이 완료되고 종료되려고 할 때

활동이 '중지됨' 상태로 전환하면 연결된 모든 수명 주기 인식 구성요소가 개발자가 [`ON_STOP`](https://developer.android.com/reference/androidx/lifecycle/Lifecycle.Event?hl=ko#ON_STOP) 이벤트를 수신합니다. 여기에서 수명 주기 구성요소는 구성요소가 화면에 보이지 않을 때 실행할 필요가 없는 기능을 모두 정지할 수 있습니다.

`onStop()` 메서드에서 손을 떼거나 조정합니다. 불필요한 리소스를 모두 회수할 수 있습니다. 예를 들어 앱은 애니메이션을 일시중지하거나, 세밀한 위치 업데이트에서 대략적인 위치 업데이트로 전환할 수 있습니다. 사용 [`onPause()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onPause()) 대신 `onStop()` 즉, 사용자가 멀티 윈도우에서 활동을 보고 있더라도 UI 관련 작업이 계속됩니다. 있습니다.

`onStop()`도 사용합니다. 비교적 CPU 집약적인 종료 작업을 수행할 수 있습니다 예를 들어 데이터베이스에 정보를 저장할 더 나은 시간을 찾을 수 없을 때, `onStop()` 중에 이 작업을 수행할 수 있습니다. 다음 예시는 초안 내용을 영구 저장소에 저장하는 `onStop()`을 구현한 것입니다.

위의 코드 샘플은 SQLite를 직접 사용합니다. 하지만 Room을 사용하면 SQLite를 통해 추상화 레이어를 제공하는 지속성 라이브러리입니다. 배우기 위해 Room을 사용할 때의 이점과 앱에 Room을 구현하는 방법을 자세히 알아보려면 자세한 내용은 [Room 지속성 라이브러리](https://developer.android.com/topic/libraries/architecture/room?hl=ko) 참조하세요.

활동이 중지됨 상태가 되면 `Activity`는 객체가 메모리에 상주하며 모든 상태 및 멤버를 유지함 창 관리자에 연결되어 있지는 않습니다. 활동이 이 정보를 회수합니다.

별도의 설정 없이 콜백 메서드 중에 생성된 구성 요소 다시 초기화 '재개됨' 상태가 됩니다 또한 시스템은 현재 트랜지스터와 각 `View` 객체의 상태를 처리해야 합니다. 따라서 사용자가 [`EditText`](https://developer.android.com/reference/android/widget/EditText?hl=ko) 위젯에 텍스트를 입력할 때 콘텐츠가 보관되므로 저장하고 복원할 필요가 없습니다.

**참고:** 활동이 중단되면 시스템은 해당 활동이 포함된 프로세스를 소멸시킬 수 있습니다(시스템이 메모리를 복구해야 하는 경우). 활동이 진행되는 동안 시스템이 프로세스를 소멸시키더라도 중지되더라도 시스템은 여전히 **`View`**의 상태를 유지합니다. 객체(예: **`EditText`** 위젯의 텍스트)를 **`Bundle`**(키-값 쌍의 blob)으로 복원되며 사용자가 액티비티로 다시 이동하는 경우 대상 사용자가 돌아올 활동을 복원하는 방법에 대한 자세한 내용은 [상태 저장 및 복원](https://developer.android.com/guide/components/activities/activity-lifecycle?hl=ko#saras) 섹션을 참조하세요.

활동은 정지됨 상태에서 다시 시작되어 사용자와 상호작용하거나, 실행을 종료하고 사라집니다. 활동이 다시 시작되면 시스템은 [`onRestart()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onRestart())를 호출합니다. `Activity`가 실행을 종료하면 시스템은 [`onDestroy()`](https://developer.android.com/reference/android/app/Activity?hl=ko#onDestroy())를 호출합니다.

+

### 5) onStop()

- Activity가 다른 Activity에 의해 100% 가려질 때 호출되는 메소드
- 홈 키를 누르는 경우, 다른 액티비티로의 이동이 있는 경우가 있음
- 이 상태에서 Activity가 호출되면, onRestart() 메소드가 호출됨

[activity](https://www.notion.so/activity-11d243b03bf4801e999fce95c846c490?pvs=21)
