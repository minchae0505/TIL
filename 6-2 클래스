1. 라이브러리(API)용 - 다른 클래스에서 이용할 목적
2. 실행용- 프로그램 진입점인 main() 메소드 제공 역할

❓1. 내가 라이브러리 클래스를 1개 만들면 실질적 클래스는 2개가 되고(컴파일러에서 자동으로 실행 클래스를 만들어주나?), 2개 만들면 실질적 클래스는 4개가 인가?

<aside>
💡

프로그램 전체에서 사용되는 클래스가 100개 라면 
99개는 라이브러리, 단 하나만 실행 클래스

</aside>

✅즉, 각각의 여러개의 라이브러리 클래스가 존재하고 main을 가진 하나의 실행 클래스가 존재

❓2. 여러 개의 클래스를 사용할 때, main을 가진 하나의 클래스에 불러와서 사용하는 건가?

oo 맞음

<aside>
💡

Student는 라이브러리 클래스이고 StudentExample은 실행 클래스 일 때
student에 main() 메소드를 작성해서 라이브러리인 동시에 실행 클래스로 만들 수도 있다.

```java
public class Student{

//라이브러리로서의 코드(필드, 생성자, 메소드)
...

//실행하기 위한 코드
public static void main(String[] args) {
	Student s1 = new Student();
	Student s2 = new Student();

```

</aside>

❓3. 라이브러리 클래스이자 실행 클래스인 클래스 1개만 존재,
         즉, 2개의 역할을 가진 클래스가 1개 존재하는 건가?

<aside>
💡

프로그램이 단 하나의 클래스로 구성된다면 student에 main() 메소드를 작성해서 
라이브러리인 동시에 실행 클래스로 작성하는 것이 좋을 수도 있다.

BUT 대부분의 객체 지향 프로그램은 라이브러리와 실행 클래스가 분리
(부품 객체 및 완성 객체)

</aside>
